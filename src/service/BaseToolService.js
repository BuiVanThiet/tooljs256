// base.js
import ExcelJS from 'exceljs';
import fs from 'fs';
import path from 'path';
import Hidemyacc from "../hidemyacc.js";


import axios from "axios";
import { chromium } from 'playwright'; // Thay puppeteer b·∫±ng playwright
import moment from 'moment-timezone';
// H√†m delay gi√∫p ch·ªù m·ªôt kho·∫£ng th·ªùi gian
const delay = (ms) => new Promise(resolve => setTimeout(resolve, ms));
// H√†m x·ª≠ l√Ω t√†i kho·∫£n v√† t√≠nh to√°n v·ªã tr√≠ c·ª≠a s·ªï cho t·ª´ng s·∫£n ph·∫©m
export async function runGroupedByKey(list, key, processItemFn, delayBetweenSameKey = 0) {
    // Gom theo key (Name Acc)
    const grouped = {};
    for (const item of list) {
        const k = item[key]?.trim() || "notData";
        if (!grouped[k]) grouped[k] = [];
        grouped[k].push(item);
    }

    // Ch·∫°y song song c√°c nh√≥m 'Name Acc'
    const tasks = Object.entries(grouped).map(([groupKey, groupItems], groupIndex) => {
        return (async () => {
            console.log(`\nüöÄ B·∫Øt ƒë·∫ßu x·ª≠ l√Ω nh√≥m: ${groupKey}`);

            // Duy·ªát c√°c s·∫£n ph·∫©m c·ªßa nh√≥m 'Name Acc'
            const position = setBrowserPosition(groupIndex); // V·ªã tr√≠ c·ªßa c√°c s·∫£n ph·∫©m c√πng 'Name Acc'

            for (let i = 0; i < groupItems.length; i++) {
                const product = groupItems[i];

                // T√≠nh to√°n v·ªã tr√≠ c·ª≠a s·ªï cho s·∫£n ph·∫©m
                const { x, y } = position; // T·∫•t c·∫£ s·∫£n ph·∫©m trong c√πng 1 'Name Acc' s·∫Ω c√≥ v·ªã tr√≠ gi·ªëng nhau

                await processItemFn(product, i, groupKey, x, y); // Truy·ªÅn x, y v√†o h√†m x·ª≠ l√Ω t·ª´ng item

                if (i < groupItems.length - 1 && delayBetweenSameKey > 0) {
                    console.log(`‚è≥ Delay ${delayBetweenSameKey}ms gi·ªØa c√°c d√≤ng trong ${groupKey}`);
                    await delay(delayBetweenSameKey); // Delay gi·ªØa c√°c d√≤ng trong nh√≥m
                }
            }

            console.log(`üèÅ Ho√†n t·∫•t nh√≥m: ${groupKey}`);
        })();
    });

    // Ch·ªù t·∫•t c·∫£ nh√≥m ho√†n t·∫•t
    await Promise.all(tasks);
}

// H√†m t√≠nh v·ªã tr√≠ c·ª≠a s·ªï tr√¨nh duy·ªát
const setBrowserPosition = (index) => {
    index = parseInt(index);
    let x, y;

    // T√≠nh to√°n v·ªã tr√≠ cho m·ªói c·ª≠a s·ªï (v·ªã tr√≠ c·ªßa t·ª´ng t√†i kho·∫£n kh√°c nhau)
    if (index >= 0 && index < 4) {
        x = index * 1200;
        y = 0;
    } else if (index >= 4 && index < 8) {
        x = (index - 4) * 1200;
        y = 900;
    } else {
        x = (index - 8) * 1200;
        y = 1800;
    }

    console.log(`Position for account ${index}: x = ${x}, y = ${y}`);
    return { x, y };
};



// H√†m ƒëƒÉng nh·∫≠p v√†o t√†i kho·∫£n v√† kh·ªüi t·∫°o tr√¨nh duy·ªát
export async function loginToProfile(hide, profileId, screenIndex) {
    let start = null;
    console.log(screenIndex)
    const { x, y } = screenIndex;
    while (!start) {
        start = await hide.start(
            profileId,
            JSON.stringify({
                // params: "--force-device-scale-factor=0.4 --window-size=1280,720 --window-position=" + (screenIndex) // T√≠nh to√°n v·ªã tr√≠ c·ª≠a s·ªï
                params: `--force-device-scale-factor=0.4 --window-size=1280,720 --window-position=${x},${y}`

            })
        );
        if (!start) await delayTime(5000);
    }

    console.log("start.data.wsUrl: ", start.data.wsUrl);
    const wsUrl = start.data.wsUrl;
    if (!wsUrl) {
        console.log("Kh√¥ng nh·∫≠n ƒë∆∞·ª£c wsUrl t·ª´ API.");
        return null;
    }

    // K·∫øt n·ªëi ƒë·∫øn tr√¨nh duy·ªát qua CDP
    const browser = await chromium.connectOverCDP(wsUrl);
    const context = await browser.contexts()[0];

    return { browser, context };
}

// H√†m m·ªü trang s·∫£n ph·∫©m v√† ki·ªÉm tra URL
export async function openProductPage(page, link) {
    try {
        await gotoWithTimeout(page, link);
        await delayTime(15000);

        const currentUrl = page.url();
        if (currentUrl.includes('account/register')) {
            console.log(`üîí LOGIN_ERROR: Redirect t·ªõi /account/register`);
            return 'LOGIN_ERROR';
        }
    } catch (e) {
        console.error(`[‚ùå L·ªói khi goto(): ${e.message}]`);
        return 'GOTO_TIMEOUT';
    }
}

// H√†m ƒë√≥ng browser v√† d·ª´ng profile
export async function closeBrowserAndStop(browser, hide, profileId) {
    if (browser) {
        await browser.close();
    }
    await hide.stop(profileId);
}

// H√†m l·∫•y ID t√†i kho·∫£n
export async function getIdAcc(nameAcc) {
    // Step 1: L·∫•y danh s√°ch t√†i kho·∫£n t·ª´ API
    const response = await axios.get("http://127.0.0.1:2268/profiles");
    const accounts = response.data.data;

    // Ch·ªçn t√†i kho·∫£n theo t√™n
    const account = accounts.find(acc => acc.name === nameAcc);
    if (!account) {
        console.log(`T√†i kho·∫£n ${nameAcc} kh√¥ng t·ªìn t·∫°i`);
        return null;
    }
    return account.id;
}

// H√†m ƒëi·ªÅu h∆∞·ªõng trang v·ªõi timeout
export async function gotoWithTimeout(page, url, timeout = 5000) {
    try {
        await page.goto(url, {
            waitUntil: 'domcontentloaded',
            timeout,
        });
    } catch (e) {
        console.error(`‚ùå L·ªói khi m·ªü trang: ${e.message}`);
        return 'GOTO_TIMEOUT';
    }
}

export async function openPage(context, url, options = {}) {
    const page = await context.newPage(); // T·∫°o m·ªôt page m·ªõi trong context
    await page.goto(url, options);  // M·ªü trang v√† ch·ªù t·∫£i xong
    return page;  // Tr·∫£ v·ªÅ page h·ª£p l·ªá ƒë·ªÉ c√≥ th·ªÉ thao t√°c v·ªõi page.evaluate()
}
export async function closeOldPage(context) {
    try {
        const pages = await context.pages();
        if (pages.length > 0) {
            const oldPage = pages[0];
            await oldPage.close();
        }
    } catch (e) {
        console.log("L·ªói khi ƒë√≥ng trang c≈©:", e);
    }
}

// H√†m l∆∞·ªõt ƒë·∫øn ph·∫ßn t·ª≠ v√† click v√†o ph·∫ßn t·ª≠ ƒë√≥
export async function scrollAndClickElement(page, selector) {
    try {
        // Ch·ªù ph·∫ßn t·ª≠ xu·∫•t hi·ªán v√† ƒë·∫£m b·∫£o ph·∫ßn t·ª≠ c√≥ th·ªÉ t∆∞∆°ng t√°c
        const element = await page.waitForSelector(selector, { timeout: 10000, state: 'visible' });

        if (element) {
            // L∆∞·ªõt ƒë·∫øn ph·∫ßn t·ª≠ tr∆∞·ªõc khi click
            await element.scrollIntoViewIfNeeded();
            console.log(`L∆∞·ªõt ƒë·∫øn ph·∫ßn t·ª≠: ${await element.innerText()}`);

            // Click v√†o ph·∫ßn t·ª≠
            await element.click();
            console.log(`ƒê√£ click v√†o ph·∫ßn t·ª≠: ${selector}`);
        } else {
            console.log(`Kh√¥ng t√¨m th·∫•y ph·∫ßn t·ª≠: ${selector}`);
        }
    } catch (e) {
        console.log("L·ªói khi thao t√°c v·ªõi ph·∫ßn t·ª≠:", e);
    }
}

export async function scrollAndClickElementByIndex(
    page,
    selector,
    position) {
    try {

        const idx = position - 1; // chuy·ªÉn sang 0-based cho .nth()
        const list = page.locator(selector);
        const count = await list.count();

        if (count === 0) {
            console.log(`Kh√¥ng t√¨m th·∫•y ph·∫ßn t·ª≠ v·ªõi selector: ${selector}`);
            return;
        }
        if (idx >= count) {
            console.log(
                `Ch·ªâ t√¨m th·∫•y ${count} ph·∫ßn t·ª≠, nh∆∞ng y√™u c·∫ßu v·ªã tr√≠ ${position}. Selector: ${selector}`
            );
            return;
        }

        const target = list.nth(idx);

        // Ch·ªù ph·∫ßn t·ª≠ tr·ªü n√™n "visible" v√† c√≥ th·ªÉ t∆∞∆°ng t√°c
        await target.waitFor({ state: 'visible', timeout: 10000 });

        // L∆∞·ªõt t·ªõi ph·∫ßn t·ª≠
        await target.scrollIntoViewIfNeeded();

        const text = await target.innerText().catch(() => '');
        console.log(`L∆∞·ªõt ƒë·∫øn ph·∫ßn t·ª≠ [#${position}]: ${text?.slice(0, 120)}`);

        // Click
        await target.click();
        console.log(`ƒê√£ click v√†o ph·∫ßn t·ª≠ [#${position}] c·ªßa selector: ${selector}`);
    } catch (e) {
        console.log('L·ªói khi thao t√°c v·ªõi ph·∫ßn t·ª≠:', e);
    }
}

export async function scrollAndHoverElement(page, selector) {
    try {
        // Ch·ªù ph·∫ßn t·ª≠ xu·∫•t hi·ªán v√† ƒë·∫£m b·∫£o ph·∫ßn t·ª≠ c√≥ th·ªÉ t∆∞∆°ng t√°c
        const element = await page.waitForSelector(selector, { timeout: 10000, state: 'visible' });

        if (element) {
            // L∆∞·ªõt ƒë·∫øn ph·∫ßn t·ª≠ tr∆∞·ªõc khi click
            await element.evaluate(el => el.scrollIntoViewIfNeeded());
            // L·∫•y v√† in n·ªôi dung c·ªßa ph·∫ßn t·ª≠
            const innerText = await element.evaluate(el => el.innerText);
            console.log(`L∆∞·ªõt ƒë·∫øn ph·∫ßn t·ª≠: ${innerText}`);

            // Di chu·ªôt v√†o ph·∫ßn t·ª≠
            await element.hover();
            console.log(`ƒê√£ hover v√†o ph·∫ßn t·ª≠: ${selector}`);
        } else {
            console.log(`Kh√¥ng t√¨m th·∫•y ph·∫ßn t·ª≠: ${selector}`);
        }
    } catch (e) {
        console.log("L·ªói khi thao t√°c v·ªõi ph·∫ßn t·ª≠:", e);
    }
}

export async function closeBrowser(accountName) {
    try {
        // Step 1: L·∫•y danh s√°ch t√†i kho·∫£n t·ª´ API
        const response = await axios.get("http://127.0.0.1:2268/profiles");
        const accounts = response.data.data;

        // Ch·ªçn t√†i kho·∫£n theo t√™n
        const account = accounts.find(acc => acc.name === accountName);
        if (!account) {
            console.log(`T√†i kho·∫£n ${accountName} kh√¥ng t·ªìn t·∫°i`);
            return null;
        }
        console.log(`ƒê√£ ƒë√≥ng [${accountName}]`)
        const startResponse = await axios.post(`http://127.0.0.1:2268/profiles/stop/${account.id}`);
    } catch (e) {
        console.log("L·ªói khi ƒë√≥ng tr√¨nh duy·ªát:", e);
    }
}

// H√†m ƒëi·ªÅn v√†o √¥ input
export async function fillInput(page, selector, value) {
    try {
        // Ch·ªù cho √¥ input xu·∫•t hi·ªán tr√™n trang
        const element = await page.waitForSelector(selector, { timeout: 10000, state: 'visible' });

        if (element) {
            const inputElement = await page.$(selector);
            if (inputElement) {
                await inputElement.evaluate((el) => el.scrollIntoView({ behavior: 'smooth', block: 'center' }));
                await inputElement.click({ clickCount: 3 });
                await page.keyboard.press('Backspace');
            }

            // ƒêi·ªÅn gi√° tr·ªã m·ªõi v√†o √¥ input
            await element.type(value);
            console.log(`ƒê√£ ƒëi·ªÅn gi√° tr·ªã "${value}" v√†o √¥ input`);
        } else {
            console.log("Kh√¥ng t√¨m th·∫•y √¥ input v·ªõi selector:", selector);
        }
    } catch (e) {
        console.log("L·ªói khi ƒëi·ªÅn v√†o √¥ input:", e);
    }
}


export async function enterInputValue(page, selector, value, index) {
    try {
        // L·∫•y t·∫•t c·∫£ c√°c ph·∫ßn t·ª≠ tr√πng v·ªõi selector
        const elements = await page.$$(selector);

        if (elements.length > 0) {
            // L·∫•y ph·∫ßn t·ª≠ th·ª© 3 (index = 2)
            const element = elements[index];

            // ƒêi·ªÅn gi√° tr·ªã v√†o √¥ input
            await element.fill(value);
            await scrollAndClickElement(page,"div#preview-sale-information h1");
            console.log(`ƒê√£ ƒëi·ªÅn gi√° tr·ªã "${value}" v√†o √¥ input th·ª© ${index + 1}`);
        } else {
            console.log(`Kh√¥ng t√¨m th·∫•y ƒë·ªß √¥ input, ch·ªâ c√≥ ${elements.length} √¥.`);
        }
    } catch (e) {
        console.log("L·ªói khi ƒëi·ªÅn v√†o √¥ input:", e);
    }
}

// uploadFile.js (ho·∫∑c trong m·ªôt file utils.js n·∫øu b·∫°n c√≥ nhi·ªÅu file helpers)
export async function uploadFile(page, uploadInputSelector, filePaths) {
    try {
        // Ch·ªù ph·∫ßn t·ª≠ input (lo·∫°i file) xu·∫•t hi·ªán
        const inputElement = await page.waitForSelector(uploadInputSelector, { timeout: 10000, state: 'visible' });

        if (inputElement) {
            // ƒê·∫£m b·∫£o input l√† ph·∫ßn t·ª≠ input ki·ªÉu file
            const inputFileElement = await page.$(uploadInputSelector); // L·∫•y l·∫°i ph·∫ßn t·ª≠ input file

            if (inputFileElement) {
                // T·∫£i l√™n t·ªáp
                await inputFileElement.setInputFiles(filePaths);  // Ph∆∞∆°ng th·ª©c n√†y ph·∫£i g·ªçi tr√™n input element
                console.log(`ƒê√£ t·∫£i l√™n ${filePaths.length} ·∫£nh`);
            } else {
                console.log("Kh√¥ng t√¨m th·∫•y ph·∫ßn t·ª≠ input file");
            }
        } else {
            console.log(`Kh√¥ng t√¨m th·∫•y input file v·ªõi selector: ${uploadInputSelector}`);
        }
    } catch (e) {
        console.log("L·ªói khi t·∫£i t·ªáp:", e);
    }
}


export async function loadList(page,element) {
    try {
        // Ch·ªù ph·∫ßn t·ª≠ `ul` c√≥ class `core-cascader-list` xu·∫•t hi·ªán tr√™n trang
        const menuItems = await page.$$eval('ul.core-cascader-list.core-cascader-list-select[role="menu"] li.core-cascader-list-item', items => {
            // Tr·∫£ v·ªÅ t·∫•t c·∫£ c√°c text c·ªßa t·ª´ng item trong danh s√°ch
            return items.map(item => item.innerText);
        });

        // In danh s√°ch c√°c text c·ªßa menu
        console.log("Danh s√°ch c√°c m·ª•c menu:");
        menuItems.forEach((text, index) => {
            console.log(`${index + 1}: ${text}`);
        });

        return menuItems; // Tr·∫£ v·ªÅ m·∫£ng ch·ª©a text c·ªßa c√°c m·ª•c menu
    } catch (e) {
        console.error("L·ªói khi l·∫•y text t·ª´ menu:", e);
    }
}

// H√†m l∆∞·ªõt ƒë·∫øn ph·∫ßn t·ª≠ c√≥ text c·ª• th·ªÉ v√† click v√†o ph·∫ßn t·ª≠
export async function scrollAndClickByText(page, menuSelector, itemSelector, itemText,itemClearText) {
    try {
        // L·∫•y t·∫•t c·∫£ c√°c ph·∫ßn t·ª≠ con c·ªßa menu
        let menuItems = await page.$$eval(`${menuSelector} ${itemSelector}`, (items) => {
            // Tr·∫£ v·ªÅ danh s√°ch text c·ªßa c√°c m·ª•c menu
            return items.map(item => item.innerText.trim());
        });
        // N·∫øu kh√¥ng c√≥ ph·∫ßn t·ª≠ n√†o, thay ƒë·ªïi menuSelector sang gi√° tr·ªã m·∫∑c ƒë·ªãnh
        if (menuItems.length === 0) {
            console.log(`Kh√¥ng t√¨m th·∫•y ph·∫ßn t·ª≠ n√†o v·ªõi menuSelector: ${menuSelector}. S·ª≠ d·ª•ng selector m·∫∑c ƒë·ªãnh.`);
            menuSelector = 'div.core-select-popup div div.core-select-popup-inner div div'; // Thay ƒë·ªïi selector
            menuItems = await page.$$eval(`${menuSelector} ${itemSelector}`, (items) => {
                // Tr·∫£ v·ªÅ danh s√°ch text c·ªßa c√°c m·ª•c menu
                return items.map(item => item.innerText.trim());
            });
        }

        // T√¨m ph·∫ßn t·ª≠ c√≥ text kh·ªõp v√† click v√†o n√≥
        const index = menuItems.findIndex(text => text === itemText); // T√¨m index c·ªßa ph·∫ßn t·ª≠ c√≥ text
        if (index !== -1) {
            // T√¨m ph·∫ßn t·ª≠ t∆∞∆°ng ·ª©ng v√† l∆∞·ªõt ƒë·∫øn n√≥
            const itemToClick = await page.$$(menuSelector + ' ' + itemSelector);
            await itemToClick[index].scrollIntoViewIfNeeded();  // L∆∞·ªõt ƒë·∫øn ph·∫ßn t·ª≠
            await itemToClick[index].click();  // Click v√†o ph·∫ßn t·ª≠
            console.log(`ƒê√£ click v√†o ph·∫ßn t·ª≠ c√≥ text: ${itemText}`);
        } else {
            await fillInput(page, "input[placeholder='Enter a custom value']", itemText);
            await delayTime(3000)
            await scrollAndClickElement(page,"div.flex.px-12.pb-0.space-x-8.flex-grow-1 button[data-v='17f6g56']")
            await delayTime(3000)
            console.log(`Kh√¥ng t√¨m th·∫•y ph·∫ßn t·ª≠ v·ªõi text: ${itemText}`);
            // Ch·ªçn to√†n b·ªô n·ªôi dung trong √¥ input ƒë·ªÉ x√≥a
            await itemClearText.click({ clickCount: 3 }); // Ch·ªçn to√†n b·ªô n·ªôi dung
            await page.keyboard.press('Backspace'); // X√≥a n·ªôi dung ƒë√£ nh·∫≠p
            await page.waitForTimeout(3000); // ƒê·ª£i 1s tr∆∞·ªõc khi chuy·ªÉn sang value ti·∫øp theo
        }
    } catch (e) {
        console.error("L·ªói khi thao t√°c v·ªõi ph·∫ßn t·ª≠:", e);
    }
}

export async function scrollAndHoverByText(page, menuSelector, itemSelector, itemText, itemClearText) {
    try {
        // L·∫•y t·∫•t c·∫£ c√°c ph·∫ßn t·ª≠ con c·ªßa menu
        let menuItems = await page.$$eval(`${menuSelector} ${itemSelector}`, (items) => {
            // Tr·∫£ v·ªÅ danh s√°ch text c·ªßa c√°c m·ª•c menu
            return items.map(item => item.innerText.trim());
        });

        // N·∫øu kh√¥ng c√≥ ph·∫ßn t·ª≠ n√†o, thay ƒë·ªïi menuSelector sang gi√° tr·ªã m·∫∑c ƒë·ªãnh
        if (menuItems.length === 0) {
            console.log(`Kh√¥ng t√¨m th·∫•y ph·∫ßn t·ª≠ n√†o v·ªõi menuSelector: ${menuSelector}. S·ª≠ d·ª•ng selector m·∫∑c ƒë·ªãnh.`);
            menuSelector = 'div.core-select-popup div div.core-select-popup-inner div div'; // Thay ƒë·ªïi selector
            menuItems = await page.$$eval(`${menuSelector} ${itemSelector}`, (items) => {
                // Tr·∫£ v·ªÅ danh s√°ch text c·ªßa c√°c m·ª•c menu
                return items.map(item => item.innerText.trim());
            });
        }

        // T√¨m ph·∫ßn t·ª≠ c√≥ text kh·ªõp v√† click v√†o n√≥
        const index = menuItems.findIndex(text => text === itemText); // T√¨m index c·ªßa ph·∫ßn t·ª≠ c√≥ text
        if (index !== -1) {
            // T√¨m ph·∫ßn t·ª≠ t∆∞∆°ng ·ª©ng v√† l∆∞·ªõt ƒë·∫øn n√≥
            const itemToClick = await page.$$(menuSelector + ' ' + itemSelector);
            await itemToClick[index].scrollIntoViewIfNeeded();  // L∆∞·ªõt ƒë·∫øn ph·∫ßn t·ª≠

            // Th·ª±c hi·ªán hover v√†o ph·∫ßn t·ª≠ tr∆∞·ªõc khi click
            await itemToClick[index].hover();
            console.log(`ƒê√£ hover v√†o ph·∫ßn t·ª≠ c√≥ text: ${itemText}`);

            // await itemToClick[index].click();  // Click v√†o ph·∫ßn t·ª≠
            // console.log(`ƒê√£ click v√†o ph·∫ßn t·ª≠ c√≥ text: ${itemText}`);
        } else {
            await fillInput(page, "input[placeholder='Enter a custom value']", itemText);
            await delayTime(3000);
            await scrollAndClickElement(page, "div.flex.px-12.pb-0.space-x-8.flex-grow-1 button[data-v='17f6g56']");
            await delayTime(3000);
            console.log(`Kh√¥ng t√¨m th·∫•y ph·∫ßn t·ª≠ v·ªõi text: ${itemText}`);

            // Ch·ªçn to√†n b·ªô n·ªôi dung trong √¥ input ƒë·ªÉ x√≥a
            await itemClearText.click({ clickCount: 3 }); // Ch·ªçn to√†n b·ªô n·ªôi dung
            await page.keyboard.press('Backspace'); // X√≥a n·ªôi dung ƒë√£ nh·∫≠p
            await page.waitForTimeout(3000); // ƒê·ª£i 1s tr∆∞·ªõc khi chuy·ªÉn sang value ti·∫øp theo
        }
    } catch (e) {
        console.error("L·ªói khi thao t√°c v·ªõi ph·∫ßn t·ª≠:", e);
    }
}


export async function scrollDownByPixels(newPage, pixels) {
    try {
        // √âp ki·ªÉu pixels th√†nh s·ªë nguy√™n (parseInt) ƒë·ªÉ ƒë·∫£m b·∫£o gi√° tr·ªã l√† s·ªë
        const pixelsToScroll = parseInt(pixels, 10);

        if (isNaN(pixelsToScroll)) {
            console.error("Gi√° tr·ªã pixels kh√¥ng h·ª£p l·ªá:", pixels);
            return;
        }

        // K√©o trang xu·ªëng theo chi·ªÅu d·ªçc (Y-axis) v·ªõi s·ªë pixel ƒë·∫ßu v√†o
        await newPage.evaluate((pixels) => {
            window.scrollBy(0, pixels);  // Cu·ªôn trang xu·ªëng s·ªë pixel b·∫°n truy·ªÅn v√†o
        }, pixelsToScroll);

        console.log(`ƒê√£ cu·ªôn m√†n xu·ªëng ${pixelsToScroll} pixel`);
    } catch (e) {
        console.log("L·ªói khi cu·ªôn trang:", e);
    }
}

export async function splitByComma(inputString) {
    // Ki·ªÉm tra chu·ªói ƒë·∫ßu v√†o c√≥ h·ª£p l·ªá kh√¥ng
    if (!inputString || typeof inputString !== "string") {
        console.error("Invalid input string:", inputString);
        return [];
    }

    // Chia chu·ªói theo d·∫•u ph·∫©y, lo·∫°i b·ªè kho·∫£ng tr·∫Øng ·ªü hai ƒë·∫ßu
    return inputString
        .split(",")                // t√°ch theo d·∫•u ph·∫©y
        .map(item => item.trim())   // lo·∫°i b·ªè kho·∫£ng tr·∫Øng 2 ƒë·∫ßu m·ªói ph·∫ßn t·ª≠
        .filter(Boolean);
}

// cho attribute

export async function parseAttributes(attributes) {
    // B∆∞·ªõc 1: T√°ch chu·ªói th√†nh c√°c c·∫∑p (key: value) theo d·∫•u ph·∫©y
    const attributePairs = attributes
        .split('),')  // T√°ch chu·ªói theo d·∫•u "),"
        .map(pair => pair.trim().replace(/[()]/g, ''));  // Lo·∫°i b·ªè d·∫•u ngo·∫∑c ƒë∆°n v√† kho·∫£ng tr·∫Øng

    // B∆∞·ªõc 2: T·∫°o ƒë·ªëi t∆∞·ª£ng t·ª´ c√°c c·∫∑p key-value
    const result = attributePairs.map(pair => {
        const [key, value] = pair.split(':');  // T√°ch key v√† value theo d·∫•u ":"
        const trimmedKey = key.trim();  // Lo·∫°i b·ªè kho·∫£ng tr·∫Øng d∆∞ th·ª´a
        const trimmedValue = value.trim();  // Lo·∫°i b·ªè kho·∫£ng tr·∫Øng d∆∞ th·ª´a

        // B∆∞·ªõc 3: T√°ch gi√° tr·ªã c√≥ d·∫•u ph·∫©y th√†nh m·∫£ng (n·∫øu c√≥)
        const valueArray = trimmedValue.split(',').map(item => item.trim());

        return { [trimmedKey]: valueArray };  // Tr·∫£ v·ªÅ ƒë·ªëi t∆∞·ª£ng v·ªõi key v√† gi√° tr·ªã d·∫°ng m·∫£ng
    });

    return result;  // Tr·∫£ v·ªÅ m·∫£ng ƒë·ªëi t∆∞·ª£ng
}

export async function clickInputByLabelTextAttribute(page, labelText, values = []) {
    try {
        if (!Array.isArray(values) || values.length === 0) {
            console.warn(`‚ö†Ô∏è Kh√¥ng c√≥ gi√° tr·ªã n√†o ƒë·ªÉ ch·ªçn cho label "${labelText}"`);
            return false;
        }

        const inputSelector = await page.evaluate((labelText) => {
            const labels = Array.from(document.querySelectorAll("div.grid div label.text-neutral-text2"));
            for (const label of labels) {
                const textNode = label.querySelector(
                    "div.formLabel-GtFmkf span.flex.items-center span.title-TwiAC7 div.content-jECjMB"
                );
                if (textNode && textNode.textContent.trim() === labelText) {
                    const wrapper = label.closest("div");
                    if (!wrapper) return null;

                    const input = wrapper.querySelector("[role='combobox']");
                    if (input && input.getAttribute("aria-controls")) {
                        return `[aria-controls="${input.getAttribute("aria-controls")}"]`;
                    }
                }
            }
            return null;
        }, labelText);

        if (!inputSelector) {
            console.error(`‚ùå Kh√¥ng t√¨m th·∫•y selector cho label "${labelText}"`);
            return false;
        }

        const input = await page.$(inputSelector);
        if (!input) {
            console.error(`‚ùå Kh√¥ng t√¨m th·∫•y element DOM t·ª´ selector "${inputSelector}"`);
            return false;
        }

        await input.click();
        await page.waitForTimeout(3000);

        for (const value of values) {
            const inputBox = await input.$("input");
            if (!inputBox) {
                console.error("‚ùå Kh√¥ng t√¨m th·∫•y √¥ nh·∫≠p ƒë·ªÉ g√µ gi√° tr·ªã");
                return false;
            }

            await inputBox.type(value);
            await page.waitForTimeout(3000);

            // Enter ƒë·ªÉ x√°c nh·∫≠n gi√° tr·ªã ƒë√£ g√µ (gi·∫£ ƒë·ªãnh h·ªá th·ªëng t·ª± suggest)
            await page.keyboard.press("Enter");
            await page.waitForTimeout(3000);

            await scrollAndClickByText(page, "div.core-select-popup.pulse-select-popup.core-select-popup-multiple div div.core-select-popup-inner div div", "li.core-select-option", value,inputBox);
            await page.waitForTimeout(3000);
        }

        console.log(`‚úÖ ƒê√£ ch·ªçn ${values.length} gi√° tr·ªã cho "${labelText}"`);

    } catch (e) {
        console.error(`‚ùå L·ªói khi ch·ªçn gi√° tr·ªã cho "${labelText}":`, e);
    }
}

//

export async function enterDescription(page, element, content) {
    try {
        // T√¨m ph·∫ßn t·ª≠ div v·ªõi selector CSS
        const descriptionField = await page.findElement(By.css(element));

        // Ch·ªù ƒë·∫øn khi ph·∫ßn t·ª≠ c√≥ th·ªÉ t∆∞∆°ng t√°c ƒë∆∞·ª£c (c√≥ th·ªÉ s·ª≠ d·ª•ng wait cho ·ªïn ƒë·ªãnh)
        await page.wait(1000); // B·∫°n c√≥ th·ªÉ thay th·∫ø b·∫±ng c√°c ph∆∞∆°ng th·ª©c ch·ªù kh√°c n·∫øu c·∫ßn

        // Ch·ªânh s·ª≠a n·ªôi dung HTML c·ªßa ph·∫ßn t·ª≠ div
        await page.executeScript("arguments[0].innerHTML = arguments[1];", descriptionField, content);

        console.log(`ƒê√£ ƒëi·ªÅn gi√° tr·ªã v√†o ph·∫ßn t·ª≠ v·ªõi selector "${element}"`);
    } catch (e) {
        console.log("L·ªói khi nh·∫≠p v√†o ph·∫ßn t·ª≠:", e);
    }
}

export async function selectRadioButton(page, selector, value) {
    try {
        // T√¨m t·∫•t c·∫£ c√°c ph·∫ßn t·ª≠ radio theo selector
        const labels = await page.$$(selector);

        // L·∫∑p qua t·∫•t c·∫£ c√°c label v√† t√¨m radio button c√≥ gi√° tr·ªã value t∆∞∆°ng ·ª©ng
        for (const label of labels) {
            const radioButton = await label.$('input[type="radio"]'); // T√¨m input radio trong label
            const radioValue = await radioButton.evaluate(el => el.value); // L·∫•y gi√° tr·ªã value c·ªßa radio button

            // So s√°nh gi√° tr·ªã radio v·ªõi gi√° tr·ªã y√™u c·∫ßu, kh√¥ng ph√¢n bi·ªát hoa th∆∞·ªùng
            if (radioValue.toLowerCase() === value.toLowerCase()) {
                // T√¨m span c√≥ class "core-icon-hover" trong c√πng label
                const span = await label.$('span.core-icon-hover');

                if (span) {
                    // Click v√†o span c√≥ class "core-icon-hover"
                    await span.click();
                    console.log(`ƒê√£ ch·ªçn radio v·ªõi value "${value}"`);
                    return;  // K·∫øt th√∫c sau khi click v√†o radio button ph√π h·ª£p
                } else {
                    console.log('Kh√¥ng t√¨m th·∫•y span v·ªõi class "core-icon-hover" trong label.');
                    return;
                }
            }
        }

        console.log(`Kh√¥ng t√¨m th·∫•y radio v·ªõi value "${value}"`);
    } catch (e) {
        console.log("L·ªói khi ch·ªçn radio button:", e);
    }
}

//ch·ªânh s·ª≠a variable
export async function uploadFileToPage(page, dataList) {
    // L·∫•y t·∫•t c·∫£ c√°c th·∫ª input[type="file"] tr√™n trang
    const fileInputs = await page.$$(`div.flex-row div.w-full div.flex-1 div div.core-space div.core-space-item div.cursor-default div.pulse-upload div.core-upload input[type="file"]`);

    // Duy·ªát qua t·ª´ng ph·∫ßn t·ª≠ trong danh s√°ch d·ªØ li·ªáu v√† truy·ªÅn ·∫£nh v√†o c√°c th·∫ª input[type="file"]
    for (let i = 0; i < dataList.length; i++) {
        const { filePath } = dataList[i]; // L·∫•y filePath t·ª´ d·ªØ li·ªáu
        const fileInput = fileInputs[i]; // L·∫•y th·∫ª input[type="file"] theo ch·ªâ s·ªë i

        console.log(`ƒêang t·∫£i l√™n file ${filePath} v√†o th·∫ª input th·ª© ${i + 1}`);
        await fileInput.uploadFile(filePath); // Upload file v√†o th·∫ª input

        // Th√™m s·ª± ki·ªán change ƒë·ªÉ k√≠ch ho·∫°t h√†nh ƒë·ªông sau khi t·∫£i l√™n
        await fileInput.evaluate(el => el.dispatchEvent(new Event('change')));
        console.log(`T·∫£i l√™n th√†nh c√¥ng cho th·∫ª input th·ª© ${i + 1}`);
    }
}

export async function checkIfElementIsDisabled(page, elementSelector) {
    try {
        // L·∫•y ph·∫ßn t·ª≠
        const element = await page.$(elementSelector);

        // Ki·ªÉm tra xem ph·∫ßn t·ª≠ c√≥ t·ªìn t·∫°i kh√¥ng
        if (!element) {
            console.log(`Ph·∫ßn t·ª≠ kh√¥ng t√¨m th·∫•y: ${elementSelector}`);
            return false;
        }

        // Ki·ªÉm tra xem ph·∫ßn t·ª≠ c√≥ class 'theme-arco-pagination-item-disabled' kh√¥ng
        const hasClass = await element.evaluate(el =>
            el.classList.contains('theme-arco-pagination-item-disabled') || el.classList.contains('core-pagination-item-disabled')
        );

        // N·∫øu c√≥ class 'theme-arco-pagination-item-disabled', tr·∫£ v·ªÅ false
        return !hasClass;
    } catch (error) {
        console.error("L·ªói khi ki·ªÉm tra ph·∫ßn t·ª≠:", error);
        return false;
    }
}

export async function getFormattedDate(check) {
    let now = moment.tz('America/Los_Angeles'); // l·∫•y th·ªùi gian hi·ªán t·∫°i ·ªü Los Angeles

    if (check === 1) {
        now.add(2, 'minutes'); // th√™m 2 ph√∫t
    } else {
        now.add(3, 'days'); // th√™m 3 ng√†y
    }

    const day = now.date();
    const month = now.month() + 1; // th√°ng l√† t·ª´ 0 ƒë·∫øn 11
    const year = now.year();
    const hour = now.hours();
    const minute = now.minutes();
    const period = hour >= 12 ? 'PM' : 'AM';

    return {
        day: formatNumber(day).toString(),
        month: formatNumber(month).toString(),
        year: year.toString(),
        hour: formatNumber(hour > 12 ? hour - 12 : hour), // ƒêi·ªÅu ch·ªânh gi·ªù theo ƒë·ªãnh d·∫°ng 12 gi·ªù
        minute: formatNumber(minute),
        period: period
    };
}

function formatNumber(num) {
    return num.toString().padStart(2, '0');  // ƒê·∫£m b·∫£o r·∫±ng s·ªë c√≥ √≠t nh·∫•t 2 ch·ªØ s·ªë
}

export async function parseSizes(sizeString) {
    // S·ª≠ d·ª•ng regex ƒë·ªÉ t√°ch c√°c ph·∫ßn size v√† gi√° tr·ªã
    const sizeArray = sizeString.match(/\(([^)]+)\)/g).map(item => {
        const [size, value] = item.slice(1, -1).split(": ");
        return { size, value: parseFloat(value) };
    });
    return sizeArray;
}
//xuat du lieu the div tim dc
export async function extractTextFromElements(page, selector) {
    try {
        // Ch·ªù cho t·∫•t c·∫£ c√°c ph·∫ßn t·ª≠ c√≥ selector xu·∫•t hi·ªán tr√™n trang
        const elements = await page.$$eval(selector, (els) => {
            // Tr·∫£ v·ªÅ m·∫£ng vƒÉn b·∫£n c·ªßa c√°c ph·∫ßn t·ª≠
            return els.map(el => el.textContent.trim());
        });

        // Ki·ªÉm tra n·∫øu kh√¥ng c√≥ d·ªØ li·ªáu
        if (elements.length === 0) {
            console.log(`Kh√¥ng t√¨m th·∫•y ph·∫ßn t·ª≠ n√†o v·ªõi selector: ${selector}`);
        } else {
            console.log(`ƒê√£ tr√≠ch xu·∫•t ${elements.length} ph·∫ßn t·ª≠ v·ªõi selector: ${selector}`);
        }

        // Tr·∫£ v·ªÅ m·∫£ng ch·ª©a vƒÉn b·∫£n c·ªßa c√°c ph·∫ßn t·ª≠
        return elements;
    } catch (e) {
        console.log("L·ªói khi tr√≠ch xu·∫•t vƒÉn b·∫£n t·ª´ c√°c ph·∫ßn t·ª≠:", e);
    }
}

export async function scrollToBottom(page, selector) {
    try {
        // Ch·ªù ph·∫ßn t·ª≠ xu·∫•t hi·ªán
        const element = await page.waitForSelector(selector, { timeout: 10000, state: 'visible' });

        if (element) {
            // L·∫•y chi·ªÅu cao c·ªßa ph·∫ßn t·ª≠ v√† chi·ªÅu cao c√≥ th·ªÉ nh√¨n th·∫•y
            const scrollHeight = await element.evaluate(el => el.scrollHeight);
            const clientHeight = await element.evaluate(el => el.clientHeight);
            let scrollPosition = 0;
            const scrollStep = 10; // M·ªói l·∫ßn cu·ªôn di chuy·ªÉn 10px
            const interval = 15; // Th·ªùi gian gi·ªØa c√°c l·∫ßn cu·ªôn (ms)

            // Cu·ªôn t·ª´ t·ª´ b·∫±ng c√°ch tƒÉng scrollTop d·∫ßn
            const smoothScroll = setInterval(async () => {
                scrollPosition += scrollStep;

                // Cu·ªôn xu·ªëng
                await element.evaluate((el, position) => {
                    el.scrollTop = position;
                }, scrollPosition);

                // Ki·ªÉm tra n·∫øu ƒë√£ cu·ªôn ƒë·∫øn ƒë√°y
                if (scrollPosition >= scrollHeight - clientHeight) {
                    clearInterval(smoothScroll);
                    console.log('ƒê√£ cu·ªôn ƒë·∫øn ƒë√°y');
                }
            }, interval); // Th·ª±c hi·ªán cu·ªôn m·ªói 15ms
        } else {
            console.log(`Kh√¥ng t√¨m th·∫•y ph·∫ßn t·ª≠: ${selector}`);
        }
    } catch (e) {
        console.log("L·ªói khi thao t√°c cu·ªôn ph·∫ßn t·ª≠:", e);
    }
}

export async function smoothScrollToTop(page, selector) {
    try {
        // Ch·ªù ph·∫ßn t·ª≠ xu·∫•t hi·ªán
        const element = await page.waitForSelector(selector, { timeout: 10000, state: 'visible' });

        if (element) {
            // L·∫•y chi·ªÅu cao c·ªßa ph·∫ßn t·ª≠ v√† chi·ªÅu cao c√≥ th·ªÉ nh√¨n th·∫•y
            const scrollHeight = await element.evaluate(el => el.scrollHeight);
            const clientHeight = await element.evaluate(el => el.clientHeight);
            let scrollPosition = scrollHeight;  // B·∫Øt ƒë·∫ßu t·ª´ v·ªã tr√≠ cu·ªôn hi·ªán t·∫°i
            const scrollStep = 10; // M·ªói l·∫ßn cu·ªôn di chuy·ªÉn 10px
            const interval = 15; // Th·ªùi gian gi·ªØa c√°c l·∫ßn cu·ªôn (ms)

            // Cu·ªôn t·ª´ t·ª´ b·∫±ng c√°ch gi·∫£m scrollTop d·∫ßn
            const smoothScroll = setInterval(async () => {
                scrollPosition -= scrollStep;

                // Cu·ªôn l√™n ƒë·∫ßu
                await element.evaluate((el, position) => {
                    el.scrollTop = position;
                }, scrollPosition);

                // Ki·ªÉm tra n·∫øu ƒë√£ cu·ªôn ƒë·∫øn ƒë·∫ßu
                if (scrollPosition <= 0) {
                    clearInterval(smoothScroll);
                    console.log('ƒê√£ cu·ªôn l√™n ƒë·∫ßu');
                }
            }, interval); // Th·ª±c hi·ªán cu·ªôn m·ªói 15ms
        } else {
            console.log(`Kh√¥ng t√¨m th·∫•y ph·∫ßn t·ª≠: ${selector}`);
        }
    } catch (e) {
        console.log("L·ªói khi thao t√°c cu·ªôn ph·∫ßn t·ª≠:", e);
    }
}

//ham ch·ªù
export async function waitForElement(page, selector, timeout ) {
    // T·∫°o promise cho vi·ªác ch·ªù ƒë·ª£i ph·∫ßn t·ª≠
    const elementPromise = page.waitForSelector(selector, { visible: true, timeout });

    // T·∫°o promise ƒë·ªÉ h·ªßy sau th·ªùi gian timeout
    const timeoutPromise = new Promise((resolve, reject) => {
        setTimeout(() => {
            reject(new Error(`Timeout after ${timeout / 1000} seconds waiting for element: ${selector}`));
        }, timeout);
    });

    // S·ª≠ d·ª•ng Promise.race ƒë·ªÉ ch·ªù cho ƒë·∫øn khi ph·∫ßn t·ª≠ xu·∫•t hi·ªán ho·∫∑c h·∫øt th·ªùi gian
    try {
        await Promise.race([elementPromise, timeoutPromise]);
        console.log(`Element ${selector} appeared.`);
        return true; // Tr·∫£ v·ªÅ true n·∫øu ph·∫ßn t·ª≠ xu·∫•t hi·ªán
    } catch (error) {
        console.log(`Error: ${error.message}`);
        return false; // Tr·∫£ v·ªÅ false n·∫øu h·∫øt th·ªùi gian
    }
}
// H√†m t·∫°o t√™n sheet t·ª´ th·ªùi gian hi·ªán t·∫°i (gi·ªùph√∫tgi√¢yng√†yth√°ngnƒÉm)
function getFormattedSheetName() {
    const now = new Date();
    const hours = now.getHours().toString().padStart(2, '0');
    const minutes = now.getMinutes().toString().padStart(2, '0');
    const seconds = now.getSeconds().toString().padStart(2, '0');
    const day = now.getDate().toString().padStart(2, '0');
    const month = (now.getMonth() + 1).toString().padStart(2, '0');
    const year = now.getFullYear();

    return `${hours}${minutes}${seconds}${day}${month}${year}`;
}

export async function getDateToday() {
    const now = new Date();
    const hours = now.getHours().toString().padStart(2, '0');
    const minutes = now.getMinutes().toString().padStart(2, '0');
    const seconds = now.getSeconds().toString().padStart(2, '0');
    const day = now.getDate().toString().padStart(2, '0');
    const month = (now.getMonth() + 1).toString().padStart(2, '0');
    const year = now.getFullYear();

    return `${hours}:${minutes}:${seconds}-${day}/${month}/${year}`;
}
// H√†m nh·∫≠n v√†o t√™n c·ªôt v√† d·ªØ li·ªáu t·ª´ng h√†ng
export async function processTableData(colum,data,output,outputRoot) {

    const outputPath = path.resolve(output);

    // T·∫°o workbook m·ªõi ho·∫∑c m·ªü workbook ƒë√£ t·ªìn t·∫°i
    const workbook = new ExcelJS.Workbook();

    if (fs.existsSync(outputPath)) {
        // N·∫øu t·ªáp ƒë√£ t·ªìn t·∫°i, ƒë·ªçc t·ªáp Excel
        await workbook.xlsx.readFile(outputPath);
    }

    // T·∫°o m·ªôt sheet m·ªõi v·ªõi t√™n m·ªõi d·ª±a tr√™n th·ªùi gian
    const sheetName = getFormattedSheetName();
    const worksheet = workbook.addWorksheet(sheetName);

    // ƒê·∫∑t t√™n c√°c c·ªôt
    worksheet.columns = colum;

    // Th√™m d·ªØ li·ªáu v√†o b·∫£ng
    // worksheet.addRow({ productName: 'T-shirt A', productId: '003', sold: 20, view: 150 });
    // worksheet.addRow({ productName: 'T-shirt B', productId: '002', sold: 35, view: 200 });

    data.forEach(row => worksheet.addRow(row));


    // ƒê·∫£m b·∫£o th∆∞ m·ª•c Output n·∫±m ·ªü c·∫•p g·ªëc c·ªßa d·ª± √°n
    const dir = path.resolve(outputRoot);
    if (!fs.existsSync(dir)) {
        fs.mkdirSync(dir, { recursive: true });
    }

    // Ghi t·ªáp v√†o th∆∞ m·ª•c Output
    await workbook.xlsx.writeFile(outputPath);

    console.log(`File Excel ƒë√£ ƒë∆∞·ª£c t·∫°o t·∫°i ${outputPath} v·ªõi sheet t√™n l√† ${sheetName}`);

    // const outputPath = path.resolve('./../Output/checkView/product_data.xlsx');
    //
    // // T·∫°o workbook m·ªõi ho·∫∑c m·ªü workbook ƒë√£ t·ªìn t·∫°i
    // const workbook = new ExcelJS.Workbook();
    //
    // if (fs.existsSync(outputPath)) {
    //     // N·∫øu t·ªáp ƒë√£ t·ªìn t·∫°i, ƒë·ªçc t·ªáp Excel
    //     await workbook.xlsx.readFile(outputPath);
    // }
    //
    // // T·∫°o m·ªôt sheet m·ªõi v·ªõi t√™n m·ªõi d·ª±a tr√™n th·ªùi gian
    // const sheetName = getFormattedSheetName();
    // const worksheet = workbook.addWorksheet(sheetName);
    //
    // // ƒê·∫∑t t√™n c√°c c·ªôt
    // worksheet.columns = [
    //     { header: 'Product Name', key: 'productName' },
    //     { header: 'Product ID', key: 'productId' },
    //     { header: 'Sold', key: 'sold' },
    //     { header: 'View', key: 'view' }
    // ];
    //
    // // Th√™m d·ªØ li·ªáu v√†o b·∫£ng
    // worksheet.addRow({ productName: 'T-shirt A', productId: '003', sold: 20, view: 150 });
    // worksheet.addRow({ productName: 'T-shirt B', productId: '002', sold: 35, view: 200 });
    //
    // // ƒê·∫£m b·∫£o th∆∞ m·ª•c Output n·∫±m ·ªü c·∫•p g·ªëc c·ªßa d·ª± √°n
    // const dir = path.resolve('./../Output/checkView');
    // if (!fs.existsSync(dir)) {
    //     fs.mkdirSync(dir, { recursive: true });
    // }
    //
    // // Ghi t·ªáp v√†o th∆∞ m·ª•c Output
    // await workbook.xlsx.writeFile(outputPath);
    //
    // console.log(`File Excel ƒë√£ ƒë∆∞·ª£c t·∫°o t·∫°i ${outputPath} v·ªõi sheet t√™n l√† ${sheetName}`);
}


// H√†m ƒë·ªÉ chia t√†i kho·∫£n th√†nh c√°c nh√≥m t·ªëi ƒëa 3 t√†i kho·∫£n
export function chunkArray(array, size) {
    const result = [];
    for (let i = 0; i < array.length; i += size) {
        result.push(array.slice(i, i + size));
    }
    return result;
}
export const hide = new Hidemyacc();


export const delayTime = (ms) => delay(ms); // S·ª≠ d·ª•ng l·∫°i delay cho c√°c b∆∞·ªõc kh√°c
