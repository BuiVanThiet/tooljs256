import xlsx from "xlsx";
import path from "path";
import fs from "fs";
import { fileURLToPath } from "url";

// Kh·ªüi t·∫°o __dirname trong m√¥i tr∆∞·ªùng ES module
const __filename = fileURLToPath(import.meta.url);
const __dirname = path.dirname(__filename);

/**
 * ƒê·ªçc file Excel b·∫•t k·ª≥ v√† thay c√°c √¥ tr·ªëng b·∫±ng "notData"
 * @param {string} fileName T√™n file Excel trong th∆∞ m·ª•c /input
 * @returns {Array<Object>} Danh s√°ch d√≤ng d·ªØ li·ªáu d·∫°ng object
 */

export function processCategoriesToArray(categories){
    if (!categories) return [];  // N·∫øu kh√¥ng c√≥ d·ªØ li·ªáu, tr·∫£ v·ªÅ m·∫£ng tr·ªëng

    // N·∫øu c√≥ d·∫•u newline (\n), t√°ch theo newline
    if (categories.includes("\n")) {
        return categories.split("\n").map(item => item.trim());  // D·ªçn d·∫πp kho·∫£ng tr·∫Øng th·ª´a
    }

    // N·∫øu c√≥ d·∫•u ph·∫©y (`,`), t√°ch theo ph·∫©y
    if (categories.includes(",")) {
        return categories.split(",").map(item => item.trim());  // D·ªçn d·∫πp kho·∫£ng tr·∫Øng th·ª´a
    }

    // N·∫øu kh√¥ng c√≥ d·∫•u ph√¢n t√°ch, tr·∫£ v·ªÅ m·ªôt m·∫£ng ch·ª©a m·ªôt ph·∫ßn t·ª≠ duy nh·∫•t
    return [categories.trim()];
}
export function readExcelFile(fileName) {
    const filePath = path.resolve(__dirname, "../../input", fileName);
    console.log("üìÑ ƒêang ƒë·ªçc file:", filePath);

    if (!fs.existsSync(filePath)) {
        console.error("‚ùå File kh√¥ng t·ªìn t·∫°i:", filePath);
        return [];
    }

    try {
        const fileBuffer = fs.readFileSync(filePath);
        const workbook = xlsx.read(fileBuffer, { type: "buffer" });

        const sheet = workbook.Sheets[workbook.SheetNames[0]];

        // ƒê·ªçc d·ªØ li·ªáu v√† gi·ªØ c·∫£ √¥ tr·ªëng (defval: "") r·ªìi thay b·∫±ng "notData"
        const rawData = xlsx.utils.sheet_to_json(sheet, { defval: "" });

        // Thay gi√° tr·ªã tr·ªëng th√†nh "notData"
        const data = rawData.map((row) => {
            const cleanRow = {};
            for (const key in row) {
                const value = row[key];
                cleanRow[key] = value === "" ? "notData" : value;
            }
            return cleanRow;
        });

        console.log(`‚úÖ ƒê√£ ƒë·ªçc ${data.length} d√≤ng t·ª´ file ${fileName}`);
        return data;
    } catch (error) {
        console.error("‚ö†Ô∏è L·ªói khi ƒë·ªçc Excel:", error.message);
        return [];
    }
}
